What happens when you initialize a repository? Why do you need to do it?
	
	No commits are made. You must make your own commit. This is because you may not want to commit all files and allows you to add your own commit comment.

How is the staging area different from the working directory and the repository? What value do you think it offers?

	The staging area is an intermediate directory where you can place the files you want to commit. This allows much more control over what gets committed.

How can you use the staging area to make sure you have one commit per logical change?

	The staging area clearly lists the changes that are being made. Running a git diff command will show the differences between the working directory and the staging area and allow you to examine the differences.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
	
	When trying to implement an experimental feature or create another version of the code, such as an easy version or a version in a different language. 

How do the diagrams help you visualize the branch structure?
	
	They show what commits are unreachable and show how the various branches are interconnected. 

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
	
	It combines the features of both branches. This is useful if someone is working on an extra feature on a separate branch.
	A diagram is an easy way to show the commits and their parents.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

	Automatic merging saves you a lot of time, though it is possible that an automatic merge could still break something. 
	Manual merges allow more control.